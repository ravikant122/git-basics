to initalize a directory as git repo
git init

now to attach a git repo to this directory
git remote add origin <repo_url>

to create a branch
git checkout -b <branch_name>  -- this will create n checkout that branch
or 
git branch -b <branch_name>

now do some changes to one(or more) files
1. they are unstaged now, so first we've to stage them
2. then we've to commit them
3. then we've to push them to repo(in the origin, origin means in the repo remotely)

to stage
git add <filename>
to stage all files
git add .

to commit
git commit -m "<message>"

to push
git push origin <branch_name>

to unstage a file
git restore --staged <filename>

to delete a branch
git branch -d <branch_name> or git branch -D <branch_name>

to delete this branch remotely
git push origin -d <branch_name> or git push origin :<locally_deleted_branch_name> 

to see branches locally
git branch

to see branches remotely
git branch -r

to see all branches locally and remotely
git branch -a

to checkout already existed branch
git checkout <branch_name>

to see whole history
git log

to delete a commit -> go to its previous commit
git reset <commitId>

to delete a bunch of commits -> go to the previous commit of the last commit in your commit list that you want to delete
git reset <commitIdBeforeLastCommit>

we cannot delete commits in between because all commits are built on the top of their previous commit
we can delete commits in their update date order(Descending)
means if we want to go to the latest 3rd commit, then we've to delete latest 2 commits

when we run this command - git reset <commitId>
then it will undo all the changes of the commits that you've deleted and we'll have this changes as unstaged

now from here, either we can remove these change or stash them
to stash them
git stash

to apply the latest stash
git stash apply

to see stash list
git stash list

to apply a specific stash
git stash apply stash@{n} - where n is the stash number

to clear all stacks
git stash clear