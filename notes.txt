to initalize a directory as git repo
git init

now to attach a git repo to this directory
git remote add origin <repo_url>

if above repo already existed then first we need to fetch the branch content then create your own branch and do changes
git pull origin <main_branch>

or if you want it simple, just clone the existing repo
git clone <repo_url>

to create a branch
git checkout -b <branch>  -- this will create n checkout that branch
or 
git branch -b <branch>

now do some changes to one(or more) files
1. they are unstaged now, so first we've to stage them
2. then we've to commit them
3. then we've to push them to repo(in the origin, origin means in the repo remotely)

to stage
git add <filename>
to stage all files
git add .

to commit
git commit -m "<message>"

to push
git push origin <branch>

to unstage a file
git restore --staged <filename>

to delete a branch
git branch -d <branch> or git branch -D <branch>

to delete this branch remotely
git push origin -d <branch> or git push origin :<locally_deleted_branch> 

to see branches locally
git branch

to see branches remotely
git branch -r

to see all branches locally and remotely
git branch -a

to checkout already existed branch
git checkout <branch>

to see whole history
git log

to delete a commit -> go to its previous commit
git reset <commitId>

to delete a bunch of commits -> go to the previous commit of the last commit in your commit list that you want to delete
git reset <commitIdBeforeLastCommit>

we cannot delete commits in between because all commits are built on the top of their previous commit
we can delete commits in their update date order(Descending)
means if we want to go to the latest 3rd commit, then we've to delete latest 2 commits

when we run this command - git reset <commitId>
then it will undo all the changes of the commits that you've deleted and we'll have this changes as unstaged

now from here, either we can remove these change or stash them
to stash them
git stash

to apply the latest stash
git stash apply

to see stash list
git stash list

to apply a specific stash
git stash apply stash@{n} - where n is the stash number

to clear all stacks
git stash clear

to force push
git push -f origin <branch>

fork - when you neeed someones's repo, whole repo, but its not in your organization or account
that's why you can't clone it, but you can fork it and it will be in your account and then you can do some changes
and create a pull request to the forked repo's account

to fork - go to github and fork the repo, now it will be in your account
now the repo you just forked is called upstream

now to add upstream locally to the repo
git remote add upstream <upstream_repo> -- the upstream repo is the repo you just forked from an account other than yours

let's see how to create a pull request in forked repo
1. do some changes in your repo(forked one)
2. push it
3. there will be an option in github to create pull request(PR) - PR will be created in other person's account

once the PR gets merged, you have to fetch the latest changes to your repo(forked one)
git fetch --all --prone   -> this will fetch you repo's updates and upstream's updates

but after fetching, the head of our branch is not at the head of upstream's branch
git reset --hard upstream/<upstream_branch>

now our head is sync with upstream but only locally, so we need to push it to the origin
git push origin <your_branch>  -> after this we can see in github, our repo's branch is synced with upstream


to do above two steps(fetch and reset) in just one stream
git pull upstream <upstream_branch>  -> now push your branch to the origin